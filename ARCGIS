# ЗВІТ ПРО ДОСЛІДЖЕННЯ ТА РЕАЛІЗАЦІЮ ІНТЕГРАЦІЇ ARCGIS КАРТ В CKAN

### Структура файлів

```
ckanext/arcgis_maps/
├── plugin.py                          # Основний файл плагіну
├── views.py                           # Flask маршрути
├── templates/arcgis_maps/
│   ├── dashboard.html                 # Головна сторінка з переліком карт
│   ├── map.html                       # Сторінка відображення окремої карти
│   ├── map_viewer.html                # Шаблон для ArcGIS viewer
│   └── map_viewer_legacy.html         # Альтернативний шаблон
├── public/
│   ├── maps/base/                     # Спільні файли ArcGIS Web AppBuilder
│   └── map_configs/                   # Конфігурації окремих карт
│       ├── transport/
│       ├── infrastructure/
│       ├── yarmark/
│       └── medical/
└── assets/                           # CSS та JS ресурси
```

### Технічний стек

- **Backend:** Python Flask Blueprint
- **Frontend:** Jinja2 Templates, HTML5, CSS3, JavaScript
- **ArcGIS:** Web AppBuilder v2.29
- **Інтеграція:** iframe embedding

## КОМПОНЕНТИ

### 0. Flask Blueprint (views.py)

**URL структура:**
- `/arcgis_maps/` - головна сторінка з переліком карт
- `/arcgis_maps/<map_id>` - сторінка конкретної карти
- `/arcgis_maps/<map_id>/config.json` - API конфігурації карти
- `/arcgis_maps/<map_id>/assets/<filename>` - статичні файли карти
- `/arcgis_maps/api/status` - API статусу всіх карт

**Основні функції:**
- `dashboard()` - відображення головної сторінки
- `show_map(map_id)` - відображення окремої карти
- `get_map_config(map_id)` - API отримання конфігурації
- `serve_map_assets(map_id, filename)` - сервування статичних файлів

### 1. Інтеграція ArcGIS Web AppBuilder

Сервер ArcGIS піднімається в окремому контейнері, після чого ArcGIS мапи інтегруються через iframe з використанням оригінальних файлів Web AppBuilder:
- Зберігається оригінальна структура файлів ArcGIS
- Реалізується правильна обробка відносних шляхів через HTML base tag
- Забезпечується сервування всіх необхідних ресурсів (JS, CSS, JSON, зображення)

### 2. Управління статичними файлами

Пропонується дворівнева систему файлів:
- **Спільні файли** (`maps/base/`) - базові файли ArcGIS Web AppBuilder
- **Специфічні файли** (`map_configs/<map_id>/`) - конфігурації окремих карт

### 3. API та конфігурації

Кожна карта має власний файл `config.json` з налаштуваннями:
- Підключення до ArcGIS Portal
- Конфігурація віджетів
- Налаштування теми та стилів

## КЛЮЧОВІ ТЕХНІЧНІ ПРОБЛЕМИ

### 1. Проблема відносних шляхів ArcGIS
**Проблема:** ArcGIS Web AppBuilder очікує специфічну структуру шляхів
**Рішення:** Використання HTML base tag та правильна маршрутизація Flask

### 2. Блокування інтерфейсу jimu-overlay
**Проблема:** Елементи ArcGIS блокували взаємодію з картою
**Рішення:** CSS та JavaScript фікси для приховування overlay елементів

### 3. Завантаження конфігурацій
**Проблема:** 404 помилки при завантаженні config.json
**Рішення:** Спеціальна обробка в serve_map_assets для конфігураційних файлів

### 4. Стандартизація URL
**Проблема:** Неконсистентна структура URL між різними картами
**Рішення:** Уніфікація всіх маршрутів під єдиним префіксом /arcgis_maps/


## ВИСНОВКИ

### Результати дослідження:

1. **Технічна можливість** інтеграції ArcGIS карт в CKAN підтверджена
2. **Повна функціональність** ArcGIS Web AppBuilder збережена
3. **Масштабованість** рішення дозволяє легко додавати нові карти
4. **Продуктивність** системи залишається на прийнятному рівні

### Переваги пропонованого рішення:

- Збереження повної функціональності ArcGIS
- Інтеграція в існуючий CKAN інтерфейс
- Централізоване управління картами
- Стандартизована URL структура
- Можливість масштабування

### Обмеження:

- Залежність від структури файлів ArcGIS Web AppBuilder
- Необхідність окремих конфігурацій для кожної карти
- Потреба в розширенні iframe для повної сумісності

## ТЕХНІЧНІ ХАРАКТЕРИСТИКИ

- **Версія CKAN:** 2.12.0a0
- **Версія ArcGIS Web AppBuilder:** 2.29
- **Python версія:** 3.12
- **Flask Blueprint:** Так
- **Кількість реалізованих карт:** 2
